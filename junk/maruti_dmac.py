# -*- coding: utf-8 -*-
"""MARUTI-DMAC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IpaTsrVRhFksE4c11Q2EiD9HypNlPf71
"""

!pip install yfinance
!pip install backtesting

# import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('dark_background')
from datetime import datetime
import yfinance as yf

"""- I am considering the stocks of Maruti Suzuki (MARUTI)"""

MARUTI = yf.download('MARUTI.NS',period='5y', progress=False)
MARUTI

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(MARUTI['Adj Close'], label='MARUTI')
plt.title('Maruti Adj. Close Price History')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price - USD($)')
plt.legend(loc='best')
plt.show()

"""## Dual Moving Average Crossover (DMAC) Trading Strategy

- It uses two moving averages, a short period and long period one.
- When the short period moving average crosses over the long period one, a signal is generated to enter the market in the direction of the crossover.
-  if short MA crosses the long MA in an upward direction - BUY signal
-  if short MA crosses the long MA in a downward direction - SELL signal

### DMAC 30/100
"""

# simple moving average with window = 30 days
ma30 = pd.DataFrame()
ma30['Adj Close'] = MARUTI['Adj Close'].rolling(window=30).mean()

# simple moving average with window = 100 days
ma100 = pd.DataFrame()
ma100['Adj Close'] = MARUTI['Adj Close'].rolling(window=100).mean()

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(MARUTI['Adj Close'], label='MARUTI')
plt.plot(ma30['Adj Close'], label='MA-30', color='orange')
plt.plot(ma100['Adj Close'], label='MA-100', color='pink')
plt.title('Maruti Adj. Close Price History')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.show()

# creating a new dataframe
df = pd.DataFrame()
df['MARUTI'] = MARUTI['Adj Close']
df['MA30'] = ma30['Adj Close']
df['MA100'] = ma100['Adj Close']
df

# buy or sell function

def MA_crossover(data):
  buy_signal = []
  sell_signal = []
  flag = -1 # when the two MA's cross each other

  for i in range(len(data)):
    if data['MA30'][i] > data['MA100'][i]:
      if flag != 1:
        buy_signal.append(data['MARUTI'][i])
        sell_signal.append(np.nan)
        flag = 1
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    elif data['MA30'][i] < data['MA100'][i]:
      if flag != 0:
        buy_signal.append(np.nan)
        sell_signal.append(data['MARUTI'][i])
        flag = 0
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    else:
      buy_signal.append(np.nan)
      sell_signal.append(np.nan)
  return (buy_signal, sell_signal)

buy_or_sell = MA_crossover(df)
df['buy_signal_price'] = buy_or_sell[0]
df['sell_signal_price'] = buy_or_sell[1]

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(df['MARUTI'], label='MARUTI', alpha=0.15, color='white')
plt.plot(df['MA30'], label='MA-30', alpha=0.30)
plt.plot(df['MA100'], label='MA-100', alpha=0.30)
plt.scatter(df.index, df['buy_signal_price'], label='Buy', marker='^', color='green', s=150)
plt.scatter(df.index, df['sell_signal_price'], label='Sell', marker='v', color='red', s=150)
plt.title('Maruti Adj Close History - Buy and Sell signals')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.grid(b=None)
plt.show()

"""#### Backtesting - DMAC 30/100 strategy"""

from backtesting import Backtest, Strategy
from backtesting.lib import crossover
from backtesting.test import SMA

class dual_MA_crossover(Strategy):
  def init(self):
    price = self.data.Close
    self.ma1 = self.I(SMA, price, 30)
    self.ma2 = self.I(SMA, price, 100)

  def next(self):
    if crossover(self.ma1, self.ma2):
      self.buy()
    elif crossover(self.ma2, self.ma1):
      self.sell()
  
bt = Backtest(MARUTI, dual_MA_crossover, exclusive_orders=True)

stats = bt.run()
bt.plot()

stats

"""##### Observation:
- DMAC 30/100 - Return - 78%

### DMAC 13/48
"""

# simple moving average with window = 13 days
ma13 = pd.DataFrame()
ma13['Adj Close'] = MARUTI['Adj Close'].rolling(window=13).mean()

# simple moving average with window = 48 days
ma48 = pd.DataFrame()
ma48['Adj Close'] = MARUTI['Adj Close'].rolling(window=48).mean()

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(MARUTI['Adj Close'], label='MARUTI')
plt.plot(ma13['Adj Close'], label='MA-13', color='orange')
plt.plot(ma48['Adj Close'], label='MA-48', color='pink')
plt.title('Maruti Adj. Close Price History')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.show()

# creating a new dataframe
df1 = pd.DataFrame()
df1['MARUTI'] = MARUTI['Adj Close']
df1['MA13'] = ma13['Adj Close']
df1['MA48'] = ma48['Adj Close']
df1

# buy or sell function

def MA_crossover(data):
  buy_signal = []
  sell_signal = []
  flag = -1 # when the two MA's cross each other

  for i in range(len(data)):
    if data['MA13'][i] > data['MA48'][i]:
      if flag != 1:
        buy_signal.append(data['MARUTI'][i])
        sell_signal.append(np.nan)
        flag = 1
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    elif data['MA13'][i] < data['MA48'][i]:
      if flag != 0:
        buy_signal.append(np.nan)
        sell_signal.append(data['MARUTI'][i])
        flag = 0
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    else:
      buy_signal.append(np.nan)
      sell_signal.append(np.nan)
  return (buy_signal, sell_signal)

buy_or_sell = MA_crossover(df1)
df1['buy_signal_price'] = buy_or_sell[0]
df1['sell_signal_price'] = buy_or_sell[1]

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(df1['MARUTI'], label='MARUTI', alpha=0.15, color='white')
plt.plot(df1['MA13'], label='MA-13', alpha=0.30)
plt.plot(df1['MA48'], label='MA-48', alpha=0.30)
plt.scatter(df1.index, df1['buy_signal_price'], label='Buy', marker='^', color='green', s=150)
plt.scatter(df1.index, df1['sell_signal_price'], label='Sell', marker='v', color='red', s=150)
plt.title('Maruti Adj Close History - Buy and Sell signals - DMAC 13/48')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.show()

class dual_MA_crossover(Strategy):
  def init(self):
    price = self.data.Close
    self.ma1 = self.I(SMA, price, 13)
    self.ma2 = self.I(SMA, price, 48)

  def next(self):
    if crossover(self.ma1, self.ma2):
      self.buy()
    elif crossover(self.ma2, self.ma1):
      self.sell()
  
bt = Backtest(MARUTI, dual_MA_crossover, exclusive_orders=True)

stats = bt.run()
bt.plot()

stats

"""##### Observation:
- DMAC 13/48 - Return - 113%

### DMAC 50/200
"""

# simple moving average with window = 13 days
ma50 = pd.DataFrame()
ma50['Adj Close'] = MARUTI['Adj Close'].rolling(window=50).mean()

# simple moving average with window = 48 days
ma200 = pd.DataFrame()
ma200['Adj Close'] = MARUTI['Adj Close'].rolling(window=200).mean()

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(MARUTI['Adj Close'], label='MARUTI')
plt.plot(ma50['Adj Close'], label='MA-50', color='orange')
plt.plot(ma200['Adj Close'], label='MA-200', color='pink')
plt.title('Maruti Adj. Close Price History')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.show()

# creating a new dataframe
df11 = pd.DataFrame()
df11['MARUTI'] = MARUTI['Adj Close']
df11['MA50'] = ma50['Adj Close']
df11['MA200'] = ma200['Adj Close']
df11

# buy or sell function

def MA_crossover(data):
  buy_signal = []
  sell_signal = []
  flag = -1 # when the two MA's cross each other

  for i in range(len(data)):
    if data['MA50'][i] > data['MA200'][i]:
      if flag != 1:
        buy_signal.append(data['MARUTI'][i])
        sell_signal.append(np.nan)
        flag = 1
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    elif data['MA50'][i] < data['MA200'][i]:
      if flag != 0:
        buy_signal.append(np.nan)
        sell_signal.append(data['MARUTI'][i])
        flag = 0
      else:
        buy_signal.append(np.nan)
        sell_signal.append(np.nan)
    else:
      buy_signal.append(np.nan)
      sell_signal.append(np.nan)
  return (buy_signal, sell_signal)

buy_or_sell = MA_crossover(df11)
df11['buy_signal_price'] = buy_or_sell[0]
df11['sell_signal_price'] = buy_or_sell[1]

# plotting the data
plt.figure(figsize=(15,8))
plt.plot(df11['MARUTI'], label='MARUTI', alpha=0.15, color='white')
plt.plot(df11['MA50'], label='MA-50', alpha=0.30)
plt.plot(df11['MA200'], label='MA-200', alpha=0.30)
plt.scatter(df11.index, df11['buy_signal_price'], label='Buy', marker='^', color='green', s=150)
plt.scatter(df11.index, df11['sell_signal_price'], label='Sell', marker='v', color='red', s=150)
plt.title('Maruti Adj Close History - Buy and Sell signals - DMAC 50/200')
plt.xlabel('Apr 14 2016 - Apr 14 2021')
plt.ylabel('Adj. Close price USD($)')
plt.legend(loc='best')
plt.show()

class dual_MA_crossover(Strategy):
  def init(self):
    price = self.data.Close
    self.ma1 = self.I(SMA, price, 50)
    self.ma2 = self.I(SMA, price, 200)

  def next(self):
    if crossover(self.ma1, self.ma2):
      self.buy()
    elif crossover(self.ma2, self.ma1):
      self.sell()
  
bt = Backtest(MARUTI, dual_MA_crossover, exclusive_orders=True)

stats = bt.run()
bt.plot()

stats

"""##### Observation:
- DMAC 50/200 - Return is -54%, which is very bad

## Conclusion

A return of 113% in 5 years is very good, which is obtained by using Dual Moving Average Crossing strategy with short and long windows 13 and 48 respectively.

I used random window lengths. I used 13 and 48 because - "A study discovered that trading the crossovers of the 13-day and 48.5-day averages produced the largest returns". [1]

However - It is up to the trader to choose the number of days to which the two moving averages are set. This should be done after testing and evaluating the system thoroughly in the recommended way, using the trader’s method.


**Note: I am not responsible for any profit/loss you make using this. Do not deploy this strategy without knowing what you are doing, I did this purely for learning purposes, and you should consult your financial advisor before any trading decision! (lol!)**


[1] [Study Determines The Best Moving Average Crossover Trading Strategy](https://finance.yahoo.com/news/study-determines-best-moving-average-195042216.html)
"""

